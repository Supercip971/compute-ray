#version 450
#extension GL_ARB_separate_shader_objects : enable

#define M_PI 3.1415926535897932384626433832795

#define WORKGROUP_SIZE 16
layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1 ) in;

struct Pixel {
    vec4 value;
};

layout(std140, binding = 0) buffer buf {
    Pixel image[];
};


layout(binding = 1) uniform UniformBufferObject {
    float width;
    float height;
} ubo;


uint width = uint(ubo.width);
uint height = uint(ubo.height);
uint half_height = height/2;

uint window_size = 16;
uint half_window_size = window_size/2;

float W = 1.0;
float ALPHA = 0.022;
float K = 0.05;

//https://www.complexity-explorables.org/explorables/spin-wheels/
void main() {
    uint x = gl_GlobalInvocationID.x;
    uint y = gl_GlobalInvocationID.y;

    if(x + window_size > width || y + window_size > height)
    {
        return;
    }
        vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
        float count = 0;
        float accum = 0;

        uint pos = width * y + x;

        for (int i = 0; i < window_size; i++) {
            for (int j = 0; j < window_size; j++) {
                uint pos2 = width * (y + j) + (x+i);
                image[pos2].value = vec4(1.0,float(x) / height,1.0, 1.0);
            }
        }


}