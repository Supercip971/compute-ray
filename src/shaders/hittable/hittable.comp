#ifndef HITTABLE_COMP
#define HITTABLE_COMP

#include "utils/ray.comp"
#include "utils/vec.comp"

struct HittableRecord
{
    bool hitted;
    vec3 point;
    vec3 normal;
    float t;
    bool front;
    int mesh_id;
    int tcount;
};

HittableRecord update_face_normal(HittableRecord record, Ray r, vec3 outward)
{
    float front = dot(r.direction, outward);
    record.front = front < 0.0f;
    float front_sign = -1 * (front / abs(front));
    record.normal = front_sign * (outward);
    return record;
}

HittableRecord hit_sphere(float tmin, float tmax, Ray r, vec3 center, vec3 size)
{
    HittableRecord record;
    float radius = size.x;
    vec3 oc = r.origin - center;
    float a = squared_len(r.direction);
    float hb = dot(oc, r.direction);
    float c = squared_len(oc) - radius * radius;

    float discriminant = hb * hb - a * c;

    record.hitted = false;
    if (discriminant < 0)
    {
        return record;
    }

    float sqrtd = sqrt(discriminant);

    float root = (-hb - sqrtd) / a;
    float rootb = -(hb + sqrtd) / a;
    bool roota_hit = (root < tmin || tmax < root);
    bool rootb_hit = (rootb < tmin || tmax < rootb);
    bool hitted = (roota_hit && rootb_hit);
    record.t = roota_hit ? (root) : (rootb);
    record.point = ray_at(r, record.t);
    record.hitted = !hitted;
    return update_face_normal(record, r, (record.point - center) / radius);
}

#endif