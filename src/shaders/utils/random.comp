#ifndef RANDOM_COMP
#define RANDOM_COMP

layout(std140, binding = 1) readonly uniform UniformBufferObjectRandom
{
    float width;
    float height;
    uint t;
    vec4 camera_pos;

    vec4 camera_target;
    vec4 camera_up;
}
rubo;
struct RandomResult
{
    uvec2 state;
    uint value;
};
float rand(vec2 co)
{
    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453123);
}
RandomResult fast_rand(uvec2 state)
{
    uint s1 = state.x;
    uint s0 = state.y;
    uint r = (s0 + s1) * (uint(rubo.t) + 8);
    state.x = s0 ^ (gl_GlobalInvocationID.x + (gl_GlobalInvocationID.y + int(sin(rubo.t / 100.f) * 100)));
    s1 ^= s1 << 11;
    state.y = s1 ^ s0 ^ (s1 >> 9) ^ (s0 >> 5);

    RandomResult result;
    result.state = state;
    result.value = r;
    return result;
}

uvec2 seed = uvec2(0);
bool loaded = false;
float random()
{
    if (!loaded)
    {
        //    seed.x = float(gl_GlobalInvocationID.x * gl_GlobalInvocationID.y) * 13.f + (128.f * float(rubo.t));
        seed.xy = uvec2(2419050644, 343247216);
        //   seed.y = float(rubo.t) * 13.f + 256.f;

        loaded = true;
    }

    RandomResult r = fast_rand(seed);
    seed = r.state;
    return float(r.value) / 4294967296.f;
}
#endif